# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Ads
    module GoogleAds
      module V3
        module Services
          module GoogleAdsService
            # Path helper methods for the GoogleAdsService API.
            module Paths
              ##
              # Create a fully-qualified AccountBudget resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/accountBudgets/{account_budget}`
              #
              # @param customer [String]
              # @param account_budget [String]
              #
              # @return [String]
              def account_budget_path customer:, account_budget:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/accountBudgets/#{account_budget}"
              end

              ##
              # Create a fully-qualified AccountBudgetProposal resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/accountBudgetProposals/{account_budget_proposal}`
              #
              # @param customer [String]
              # @param account_budget_proposal [String]
              #
              # @return [String]
              def account_budget_proposal_path customer:, account_budget_proposal:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/accountBudgetProposals/#{account_budget_proposal}"
              end

              ##
              # Create a fully-qualified Ad resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/ads/{ad}`
              #
              # @param customer [String]
              # @param ad [String]
              #
              # @return [String]
              def ad_path customer:, ad:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/ads/#{ad}"
              end

              ##
              # Create a fully-qualified AdGroup resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroups/{ad_group}`
              #
              # @param customer [String]
              # @param ad_group [String]
              #
              # @return [String]
              def ad_group_path customer:, ad_group:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroups/#{ad_group}"
              end

              ##
              # Create a fully-qualified AdGroupAd resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupAds/{ad_group_ad}`
              #
              # @param customer [String]
              # @param ad_group_ad [String]
              #
              # @return [String]
              def ad_group_ad_path customer:, ad_group_ad:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupAds/#{ad_group_ad}"
              end

              ##
              # Create a fully-qualified AdGroupAdAssetView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupAdAssets/{ad_group_ad_asset_view}`
              #
              # @param customer [String]
              # @param ad_group_ad_asset_view [String]
              #
              # @return [String]
              def ad_group_ad_asset_view_path customer:, ad_group_ad_asset_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupAdAssets/#{ad_group_ad_asset_view}"
              end

              ##
              # Create a fully-qualified AdGroupAdLabel resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupAdLabels/{ad_group_ad_label}`
              #
              # @param customer [String]
              # @param ad_group_ad_label [String]
              #
              # @return [String]
              def ad_group_ad_label_path customer:, ad_group_ad_label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupAdLabels/#{ad_group_ad_label}"
              end

              ##
              # Create a fully-qualified AdGroupAudienceView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupAudienceViews/{ad_group_audience_view}`
              #
              # @param customer [String]
              # @param ad_group_audience_view [String]
              #
              # @return [String]
              def ad_group_audience_view_path customer:, ad_group_audience_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupAudienceViews/#{ad_group_audience_view}"
              end

              ##
              # Create a fully-qualified AdGroupBidModifier resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupBidModifiers/{ad_group_bid_modifier}`
              #
              # @param customer [String]
              # @param ad_group_bid_modifier [String]
              #
              # @return [String]
              def ad_group_bid_modifier_path customer:, ad_group_bid_modifier:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupBidModifiers/#{ad_group_bid_modifier}"
              end

              ##
              # Create a fully-qualified AdGroupCriterion resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupCriteria/{ad_group_criterion}`
              #
              # @param customer [String]
              # @param ad_group_criterion [String]
              #
              # @return [String]
              def ad_group_criterion_path customer:, ad_group_criterion:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupCriteria/#{ad_group_criterion}"
              end

              ##
              # Create a fully-qualified AdGroupCriterionLabel resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupCriterionLabels/{ad_group_criterion_label}`
              #
              # @param customer [String]
              # @param ad_group_criterion_label [String]
              #
              # @return [String]
              def ad_group_criterion_label_path customer:, ad_group_criterion_label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupCriterionLabels/#{ad_group_criterion_label}"
              end

              ##
              # Create a fully-qualified AdGroupCriterionSimulation resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupCriterionSimulations/{ad_group_criterion_simulation}`
              #
              # @param customer [String]
              # @param ad_group_criterion_simulation [String]
              #
              # @return [String]
              def ad_group_criterion_simulation_path customer:, ad_group_criterion_simulation:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupCriterionSimulations/#{ad_group_criterion_simulation}"
              end

              ##
              # Create a fully-qualified AdGroupExtensionSetting resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupExtensionSettings/{ad_group_extension_setting}`
              #
              # @param customer [String]
              # @param ad_group_extension_setting [String]
              #
              # @return [String]
              def ad_group_extension_setting_path customer:, ad_group_extension_setting:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupExtensionSettings/#{ad_group_extension_setting}"
              end

              ##
              # Create a fully-qualified AdGroupFeed resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupFeeds/{ad_group_feed}`
              #
              # @param customer [String]
              # @param ad_group_feed [String]
              #
              # @return [String]
              def ad_group_feed_path customer:, ad_group_feed:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupFeeds/#{ad_group_feed}"
              end

              ##
              # Create a fully-qualified AdGroupLabel resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupLabels/{ad_group_label}`
              #
              # @param customer [String]
              # @param ad_group_label [String]
              #
              # @return [String]
              def ad_group_label_path customer:, ad_group_label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupLabels/#{ad_group_label}"
              end

              ##
              # Create a fully-qualified AdGroupSimulation resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupSimulations/{ad_group_simulation}`
              #
              # @param customer [String]
              # @param ad_group_simulation [String]
              #
              # @return [String]
              def ad_group_simulation_path customer:, ad_group_simulation:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupSimulations/#{ad_group_simulation}"
              end

              ##
              # Create a fully-qualified AdParameter resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adParameters/{ad_parameter}`
              #
              # @param customer [String]
              # @param ad_parameter [String]
              #
              # @return [String]
              def ad_parameter_path customer:, ad_parameter:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adParameters/#{ad_parameter}"
              end

              ##
              # Create a fully-qualified AdScheduleView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adScheduleViews/{ad_schedule_view}`
              #
              # @param customer [String]
              # @param ad_schedule_view [String]
              #
              # @return [String]
              def ad_schedule_view_path customer:, ad_schedule_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adScheduleViews/#{ad_schedule_view}"
              end

              ##
              # Create a fully-qualified AgeRangeView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/ageRangeViews/{age_range_view}`
              #
              # @param customer [String]
              # @param age_range_view [String]
              #
              # @return [String]
              def age_range_view_path customer:, age_range_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/ageRangeViews/#{age_range_view}"
              end

              ##
              # Create a fully-qualified Asset resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/assets/{asset}`
              #
              # @param customer [String]
              # @param asset [String]
              #
              # @return [String]
              def asset_path customer:, asset:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/assets/#{asset}"
              end

              ##
              # Create a fully-qualified BiddingStrategy resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/biddingStrategies/{bidding_strategy}`
              #
              # @param customer [String]
              # @param bidding_strategy [String]
              #
              # @return [String]
              def bidding_strategy_path customer:, bidding_strategy:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/biddingStrategies/#{bidding_strategy}"
              end

              ##
              # Create a fully-qualified BillingSetup resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/billingSetups/{billing_setup}`
              #
              # @param customer [String]
              # @param billing_setup [String]
              #
              # @return [String]
              def billing_setup_path customer:, billing_setup:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/billingSetups/#{billing_setup}"
              end

              ##
              # Create a fully-qualified Campaign resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaigns/{campaign}`
              #
              # @param customer [String]
              # @param campaign [String]
              #
              # @return [String]
              def campaign_path customer:, campaign:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaigns/#{campaign}"
              end

              ##
              # Create a fully-qualified CampaignAudienceView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignAudienceViews/{campaign_audience_view}`
              #
              # @param customer [String]
              # @param campaign_audience_view [String]
              #
              # @return [String]
              def campaign_audience_view_path customer:, campaign_audience_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignAudienceViews/#{campaign_audience_view}"
              end

              ##
              # Create a fully-qualified CampaignBidModifier resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignBidModifiers/{campaign_bid_modifier}`
              #
              # @param customer [String]
              # @param campaign_bid_modifier [String]
              #
              # @return [String]
              def campaign_bid_modifier_path customer:, campaign_bid_modifier:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignBidModifiers/#{campaign_bid_modifier}"
              end

              ##
              # Create a fully-qualified CampaignBudget resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignBudgets/{campaign_budget}`
              #
              # @param customer [String]
              # @param campaign_budget [String]
              #
              # @return [String]
              def campaign_budget_path customer:, campaign_budget:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignBudgets/#{campaign_budget}"
              end

              ##
              # Create a fully-qualified CampaignCriterion resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignCriteria/{campaign_criterion}`
              #
              # @param customer [String]
              # @param campaign_criterion [String]
              #
              # @return [String]
              def campaign_criterion_path customer:, campaign_criterion:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignCriteria/#{campaign_criterion}"
              end

              ##
              # Create a fully-qualified CampaignCriterionSimulation resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignCriterionSimulations/{campaign_criterion_simulation}`
              #
              # @param customer [String]
              # @param campaign_criterion_simulation [String]
              #
              # @return [String]
              def campaign_criterion_simulation_path customer:, campaign_criterion_simulation:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignCriterionSimulations/#{campaign_criterion_simulation}"
              end

              ##
              # Create a fully-qualified CampaignDraft resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignDrafts/{campaign_draft}`
              #
              # @param customer [String]
              # @param campaign_draft [String]
              #
              # @return [String]
              def campaign_draft_path customer:, campaign_draft:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignDrafts/#{campaign_draft}"
              end

              ##
              # Create a fully-qualified CampaignExperiment resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignExperiments/{campaign_experiment}`
              #
              # @param customer [String]
              # @param campaign_experiment [String]
              #
              # @return [String]
              def campaign_experiment_path customer:, campaign_experiment:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignExperiments/#{campaign_experiment}"
              end

              ##
              # Create a fully-qualified CampaignExtensionSetting resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignExtensionSettings/{campaign_extension_setting}`
              #
              # @param customer [String]
              # @param campaign_extension_setting [String]
              #
              # @return [String]
              def campaign_extension_setting_path customer:, campaign_extension_setting:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignExtensionSettings/#{campaign_extension_setting}"
              end

              ##
              # Create a fully-qualified CampaignFeed resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignFeeds/{campaign_feed}`
              #
              # @param customer [String]
              # @param campaign_feed [String]
              #
              # @return [String]
              def campaign_feed_path customer:, campaign_feed:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignFeeds/#{campaign_feed}"
              end

              ##
              # Create a fully-qualified CampaignLabel resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignLabels/{campaign_label}`
              #
              # @param customer [String]
              # @param campaign_label [String]
              #
              # @return [String]
              def campaign_label_path customer:, campaign_label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignLabels/#{campaign_label}"
              end

              ##
              # Create a fully-qualified CampaignSharedSet resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignSharedSets/{campaign_shared_set}`
              #
              # @param customer [String]
              # @param campaign_shared_set [String]
              #
              # @return [String]
              def campaign_shared_set_path customer:, campaign_shared_set:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignSharedSets/#{campaign_shared_set}"
              end

              ##
              # Create a fully-qualified CarrierConstant resource string.
              #
              # The resource will be in the following format:
              #
              # `carrierConstants/{carrier_constant}`
              #
              # @param carrier_constant [String]
              #
              # @return [String]
              def carrier_constant_path carrier_constant:
                "carrierConstants/#{carrier_constant}"
              end

              ##
              # Create a fully-qualified ChangeStatus resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/changeStatus/{change_status}`
              #
              # @param customer [String]
              # @param change_status [String]
              #
              # @return [String]
              def change_status_path customer:, change_status:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/changeStatus/#{change_status}"
              end

              ##
              # Create a fully-qualified ClickView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/clickViews/{click_view}`
              #
              # @param customer [String]
              # @param click_view [String]
              #
              # @return [String]
              def click_view_path customer:, click_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/clickViews/#{click_view}"
              end

              ##
              # Create a fully-qualified ConversionAction resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/conversionActions/{conversion_action}`
              #
              # @param customer [String]
              # @param conversion_action [String]
              #
              # @return [String]
              def conversion_action_path customer:, conversion_action:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/conversionActions/#{conversion_action}"
              end

              ##
              # Create a fully-qualified CurrencyConstant resource string.
              #
              # The resource will be in the following format:
              #
              # `currencyConstants/{currency_constant}`
              #
              # @param currency_constant [String]
              #
              # @return [String]
              def currency_constant_path currency_constant:
                "currencyConstants/#{currency_constant}"
              end

              ##
              # Create a fully-qualified CustomInterest resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customInterests/{custom_interest}`
              #
              # @param customer [String]
              # @param custom_interest [String]
              #
              # @return [String]
              def custom_interest_path customer:, custom_interest:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customInterests/#{custom_interest}"
              end

              ##
              # Create a fully-qualified Customer resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}`
              #
              # @param customer [String]
              #
              # @return [String]
              def customer_path customer:
                "customers/#{customer}"
              end

              ##
              # Create a fully-qualified CustomerClient resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customerClients/{customer_client}`
              #
              # @param customer [String]
              # @param customer_client [String]
              #
              # @return [String]
              def customer_client_path customer:, customer_client:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customerClients/#{customer_client}"
              end

              ##
              # Create a fully-qualified CustomerClientLink resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customerClientLinks/{customer_client_link}`
              #
              # @param customer [String]
              # @param customer_client_link [String]
              #
              # @return [String]
              def customer_client_link_path customer:, customer_client_link:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customerClientLinks/#{customer_client_link}"
              end

              ##
              # Create a fully-qualified CustomerExtensionSetting resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customerExtensionSettings/{customer_extension_setting}`
              #
              # @param customer [String]
              # @param customer_extension_setting [String]
              #
              # @return [String]
              def customer_extension_setting_path customer:, customer_extension_setting:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customerExtensionSettings/#{customer_extension_setting}"
              end

              ##
              # Create a fully-qualified CustomerFeed resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customerFeeds/{customer_feed}`
              #
              # @param customer [String]
              # @param customer_feed [String]
              #
              # @return [String]
              def customer_feed_path customer:, customer_feed:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customerFeeds/#{customer_feed}"
              end

              ##
              # Create a fully-qualified CustomerLabel resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customerLabels/{customer_label}`
              #
              # @param customer [String]
              # @param customer_label [String]
              #
              # @return [String]
              def customer_label_path customer:, customer_label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customerLabels/#{customer_label}"
              end

              ##
              # Create a fully-qualified CustomerManagerLink resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customerManagerLinks/{customer_manager_link}`
              #
              # @param customer [String]
              # @param customer_manager_link [String]
              #
              # @return [String]
              def customer_manager_link_path customer:, customer_manager_link:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customerManagerLinks/#{customer_manager_link}"
              end

              ##
              # Create a fully-qualified CustomerNegativeCriterion resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customerNegativeCriteria/{customer_negative_criterion}`
              #
              # @param customer [String]
              # @param customer_negative_criterion [String]
              #
              # @return [String]
              def customer_negative_criterion_path customer:, customer_negative_criterion:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customerNegativeCriteria/#{customer_negative_criterion}"
              end

              ##
              # Create a fully-qualified DetailPlacementView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/detailPlacementViews/{detail_placement_view}`
              #
              # @param customer [String]
              # @param detail_placement_view [String]
              #
              # @return [String]
              def detail_placement_view_path customer:, detail_placement_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/detailPlacementViews/#{detail_placement_view}"
              end

              ##
              # Create a fully-qualified DisplayKeywordView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/displayKeywordViews/{display_keyword_view}`
              #
              # @param customer [String]
              # @param display_keyword_view [String]
              #
              # @return [String]
              def display_keyword_view_path customer:, display_keyword_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/displayKeywordViews/#{display_keyword_view}"
              end

              ##
              # Create a fully-qualified DistanceView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/distanceViews/{distance_view}`
              #
              # @param customer [String]
              # @param distance_view [String]
              #
              # @return [String]
              def distance_view_path customer:, distance_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/distanceViews/#{distance_view}"
              end

              ##
              # Create a fully-qualified DomainCategory resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/domainCategories/{domain_category}`
              #
              # @param customer [String]
              # @param domain_category [String]
              #
              # @return [String]
              def domain_category_path customer:, domain_category:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/domainCategories/#{domain_category}"
              end

              ##
              # Create a fully-qualified DynamicSearchAdsSearchTermView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/dynamicSearchAdsSearchTermViews/{dynamic_search_ads_search_term_view}`
              #
              # @param customer [String]
              # @param dynamic_search_ads_search_term_view [String]
              #
              # @return [String]
              def dynamic_search_ads_search_term_view_path customer:, dynamic_search_ads_search_term_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/dynamicSearchAdsSearchTermViews/#{dynamic_search_ads_search_term_view}"
              end

              ##
              # Create a fully-qualified ExpandedLandingPageView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/expandedLandingPageViews/{expanded_landing_page_view}`
              #
              # @param customer [String]
              # @param expanded_landing_page_view [String]
              #
              # @return [String]
              def expanded_landing_page_view_path customer:, expanded_landing_page_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/expandedLandingPageViews/#{expanded_landing_page_view}"
              end

              ##
              # Create a fully-qualified ExtensionFeedItem resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/extensionFeedItems/{extension_feed_item}`
              #
              # @param customer [String]
              # @param extension_feed_item [String]
              #
              # @return [String]
              def extension_feed_item_path customer:, extension_feed_item:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/extensionFeedItems/#{extension_feed_item}"
              end

              ##
              # Create a fully-qualified Feed resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/feeds/{feed}`
              #
              # @param customer [String]
              # @param feed [String]
              #
              # @return [String]
              def feed_path customer:, feed:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/feeds/#{feed}"
              end

              ##
              # Create a fully-qualified FeedItem resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/feedItems/{feed_item}`
              #
              # @param customer [String]
              # @param feed_item [String]
              #
              # @return [String]
              def feed_item_path customer:, feed_item:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/feedItems/#{feed_item}"
              end

              ##
              # Create a fully-qualified FeedItemTarget resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/feedItemTargets/{feed_item_target}`
              #
              # @param customer [String]
              # @param feed_item_target [String]
              #
              # @return [String]
              def feed_item_target_path customer:, feed_item_target:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/feedItemTargets/#{feed_item_target}"
              end

              ##
              # Create a fully-qualified FeedMapping resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/feedMappings/{feed_mapping}`
              #
              # @param customer [String]
              # @param feed_mapping [String]
              #
              # @return [String]
              def feed_mapping_path customer:, feed_mapping:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/feedMappings/#{feed_mapping}"
              end

              ##
              # Create a fully-qualified FeedPlaceholderView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/feedPlaceholderViews/{feed_placeholder_view}`
              #
              # @param customer [String]
              # @param feed_placeholder_view [String]
              #
              # @return [String]
              def feed_placeholder_view_path customer:, feed_placeholder_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/feedPlaceholderViews/#{feed_placeholder_view}"
              end

              ##
              # Create a fully-qualified GenderView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/genderViews/{gender_view}`
              #
              # @param customer [String]
              # @param gender_view [String]
              #
              # @return [String]
              def gender_view_path customer:, gender_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/genderViews/#{gender_view}"
              end

              ##
              # Create a fully-qualified GeoTargetConstant resource string.
              #
              # The resource will be in the following format:
              #
              # `geoTargetConstants/{geo_target_constant}`
              #
              # @param geo_target_constant [String]
              #
              # @return [String]
              def geo_target_constant_path geo_target_constant:
                "geoTargetConstants/#{geo_target_constant}"
              end

              ##
              # Create a fully-qualified GeographicView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/geographicViews/{geographic_view}`
              #
              # @param customer [String]
              # @param geographic_view [String]
              #
              # @return [String]
              def geographic_view_path customer:, geographic_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/geographicViews/#{geographic_view}"
              end

              ##
              # Create a fully-qualified GroupPlacementView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/groupPlacementViews/{group_placement_view}`
              #
              # @param customer [String]
              # @param group_placement_view [String]
              #
              # @return [String]
              def group_placement_view_path customer:, group_placement_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/groupPlacementViews/#{group_placement_view}"
              end

              ##
              # Create a fully-qualified HotelGroupView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/hotelGroupViews/{hotel_group_view}`
              #
              # @param customer [String]
              # @param hotel_group_view [String]
              #
              # @return [String]
              def hotel_group_view_path customer:, hotel_group_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/hotelGroupViews/#{hotel_group_view}"
              end

              ##
              # Create a fully-qualified HotelPerformanceView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/hotelPerformanceView`
              #
              # @param customer [String]
              #
              # @return [String]
              def hotel_performance_view_path customer:
                "customers/#{customer}/hotelPerformanceView"
              end

              ##
              # Create a fully-qualified KeywordPlan resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/keywordPlans/{keyword_plan}`
              #
              # @param customer [String]
              # @param keyword_plan [String]
              #
              # @return [String]
              def keyword_plan_path customer:, keyword_plan:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/keywordPlans/#{keyword_plan}"
              end

              ##
              # Create a fully-qualified KeywordPlanAdGroup resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/keywordPlanAdGroups/{keyword_plan_ad_group}`
              #
              # @param customer [String]
              # @param keyword_plan_ad_group [String]
              #
              # @return [String]
              def keyword_plan_ad_group_path customer:, keyword_plan_ad_group:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/keywordPlanAdGroups/#{keyword_plan_ad_group}"
              end

              ##
              # Create a fully-qualified KeywordPlanCampaign resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/keywordPlanCampaigns/{keyword_plan_campaign}`
              #
              # @param customer [String]
              # @param keyword_plan_campaign [String]
              #
              # @return [String]
              def keyword_plan_campaign_path customer:, keyword_plan_campaign:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/keywordPlanCampaigns/#{keyword_plan_campaign}"
              end

              ##
              # Create a fully-qualified KeywordPlanKeyword resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/keywordPlanKeywords/{keyword_plan_keyword}`
              #
              # @param customer [String]
              # @param keyword_plan_keyword [String]
              #
              # @return [String]
              def keyword_plan_keyword_path customer:, keyword_plan_keyword:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/keywordPlanKeywords/#{keyword_plan_keyword}"
              end

              ##
              # Create a fully-qualified KeywordPlanNegativeKeyword resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/keywordPlanNegativeKeywords/{keyword_plan_negative_keyword}`
              #
              # @param customer [String]
              # @param keyword_plan_negative_keyword [String]
              #
              # @return [String]
              def keyword_plan_negative_keyword_path customer:, keyword_plan_negative_keyword:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/keywordPlanNegativeKeywords/#{keyword_plan_negative_keyword}"
              end

              ##
              # Create a fully-qualified KeywordView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/keywordViews/{keyword_view}`
              #
              # @param customer [String]
              # @param keyword_view [String]
              #
              # @return [String]
              def keyword_view_path customer:, keyword_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/keywordViews/#{keyword_view}"
              end

              ##
              # Create a fully-qualified Label resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/labels/{label}`
              #
              # @param customer [String]
              # @param label [String]
              #
              # @return [String]
              def label_path customer:, label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/labels/#{label}"
              end

              ##
              # Create a fully-qualified LandingPageView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/landingPageViews/{landing_page_view}`
              #
              # @param customer [String]
              # @param landing_page_view [String]
              #
              # @return [String]
              def landing_page_view_path customer:, landing_page_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/landingPageViews/#{landing_page_view}"
              end

              ##
              # Create a fully-qualified LanguageConstant resource string.
              #
              # The resource will be in the following format:
              #
              # `languageConstants/{language_constant}`
              #
              # @param language_constant [String]
              #
              # @return [String]
              def language_constant_path language_constant:
                "languageConstants/#{language_constant}"
              end

              ##
              # Create a fully-qualified LocationView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/locationViews/{location_view}`
              #
              # @param customer [String]
              # @param location_view [String]
              #
              # @return [String]
              def location_view_path customer:, location_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/locationViews/#{location_view}"
              end

              ##
              # Create a fully-qualified ManagedPlacementView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/managedPlacementViews/{managed_placement_view}`
              #
              # @param customer [String]
              # @param managed_placement_view [String]
              #
              # @return [String]
              def managed_placement_view_path customer:, managed_placement_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/managedPlacementViews/#{managed_placement_view}"
              end

              ##
              # Create a fully-qualified MediaFile resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/mediaFiles/{media_file}`
              #
              # @param customer [String]
              # @param media_file [String]
              #
              # @return [String]
              def media_file_path customer:, media_file:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/mediaFiles/#{media_file}"
              end

              ##
              # Create a fully-qualified MobileAppCategoryConstant resource string.
              #
              # The resource will be in the following format:
              #
              # `mobileAppCategoryConstants/{mobile_app_category_constant}`
              #
              # @param mobile_app_category_constant [String]
              #
              # @return [String]
              def mobile_app_category_constant_path mobile_app_category_constant:
                "mobileAppCategoryConstants/#{mobile_app_category_constant}"
              end

              ##
              # Create a fully-qualified MobileDeviceConstant resource string.
              #
              # The resource will be in the following format:
              #
              # `mobileDeviceConstants/{mobile_device_constant}`
              #
              # @param mobile_device_constant [String]
              #
              # @return [String]
              def mobile_device_constant_path mobile_device_constant:
                "mobileDeviceConstants/#{mobile_device_constant}"
              end

              ##
              # Create a fully-qualified MutateJob resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/mutateJobs/{mutate_job}`
              #
              # @param customer [String]
              # @param mutate_job [String]
              #
              # @return [String]
              def mutate_job_path customer:, mutate_job:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/mutateJobs/#{mutate_job}"
              end

              ##
              # Create a fully-qualified OperatingSystemVersionConstant resource string.
              #
              # The resource will be in the following format:
              #
              # `operatingSystemVersionConstants/{operating_system_version_constant}`
              #
              # @param operating_system_version_constant [String]
              #
              # @return [String]
              def operating_system_version_constant_path operating_system_version_constant:
                "operatingSystemVersionConstants/#{operating_system_version_constant}"
              end

              ##
              # Create a fully-qualified PaidOrganicSearchTermView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/paidOrganicSearchTermViews/{paid_organic_search_term_view}`
              #
              # @param customer [String]
              # @param paid_organic_search_term_view [String]
              #
              # @return [String]
              def paid_organic_search_term_view_path customer:, paid_organic_search_term_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/paidOrganicSearchTermViews/#{paid_organic_search_term_view}"
              end

              ##
              # Create a fully-qualified ParentalStatusView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/parentalStatusViews/{parental_status_view}`
              #
              # @param customer [String]
              # @param parental_status_view [String]
              #
              # @return [String]
              def parental_status_view_path customer:, parental_status_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/parentalStatusViews/#{parental_status_view}"
              end

              ##
              # Create a fully-qualified PaymentsAccount resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/paymentsAccounts/{payments_account}`
              #
              # @param customer [String]
              # @param payments_account [String]
              #
              # @return [String]
              def payments_account_path customer:, payments_account:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/paymentsAccounts/#{payments_account}"
              end

              ##
              # Create a fully-qualified ProductBiddingCategoryConstant resource string.
              #
              # The resource will be in the following format:
              #
              # `productBiddingCategoryConstants/{product_bidding_category_constant}`
              #
              # @param product_bidding_category_constant [String]
              #
              # @return [String]
              def product_bidding_category_constant_path product_bidding_category_constant:
                "productBiddingCategoryConstants/#{product_bidding_category_constant}"
              end

              ##
              # Create a fully-qualified ProductGroupView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/productGroupViews/{product_group_view}`
              #
              # @param customer [String]
              # @param product_group_view [String]
              #
              # @return [String]
              def product_group_view_path customer:, product_group_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/productGroupViews/#{product_group_view}"
              end

              ##
              # Create a fully-qualified Recommendation resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/recommendations/{recommendation}`
              #
              # @param customer [String]
              # @param recommendation [String]
              #
              # @return [String]
              def recommendation_path customer:, recommendation:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/recommendations/#{recommendation}"
              end

              ##
              # Create a fully-qualified RemarketingAction resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/remarketingActions/{remarketing_action}`
              #
              # @param customer [String]
              # @param remarketing_action [String]
              #
              # @return [String]
              def remarketing_action_path customer:, remarketing_action:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/remarketingActions/#{remarketing_action}"
              end

              ##
              # Create a fully-qualified SearchTermView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/searchTermViews/{search_term_view}`
              #
              # @param customer [String]
              # @param search_term_view [String]
              #
              # @return [String]
              def search_term_view_path customer:, search_term_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/searchTermViews/#{search_term_view}"
              end

              ##
              # Create a fully-qualified SharedCriterion resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/sharedCriteria/{shared_criterion}`
              #
              # @param customer [String]
              # @param shared_criterion [String]
              #
              # @return [String]
              def shared_criterion_path customer:, shared_criterion:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/sharedCriteria/#{shared_criterion}"
              end

              ##
              # Create a fully-qualified SharedSet resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/sharedSets/{shared_set}`
              #
              # @param customer [String]
              # @param shared_set [String]
              #
              # @return [String]
              def shared_set_path customer:, shared_set:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/sharedSets/#{shared_set}"
              end

              ##
              # Create a fully-qualified ShoppingPerformanceView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/shoppingPerformanceView`
              #
              # @param customer [String]
              #
              # @return [String]
              def shopping_performance_view_path customer:
                "customers/#{customer}/shoppingPerformanceView"
              end

              ##
              # Create a fully-qualified TopicConstant resource string.
              #
              # The resource will be in the following format:
              #
              # `topicConstants/{topic_constant}`
              #
              # @param topic_constant [String]
              #
              # @return [String]
              def topic_constant_path topic_constant:
                "topicConstants/#{topic_constant}"
              end

              ##
              # Create a fully-qualified TopicView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/topicViews/{topic_view}`
              #
              # @param customer [String]
              # @param topic_view [String]
              #
              # @return [String]
              def topic_view_path customer:, topic_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/topicViews/#{topic_view}"
              end

              ##
              # Create a fully-qualified UserInterest resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/userInterests/{user_interest}`
              #
              # @param customer [String]
              # @param user_interest [String]
              #
              # @return [String]
              def user_interest_path customer:, user_interest:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/userInterests/#{user_interest}"
              end

              ##
              # Create a fully-qualified UserList resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/userLists/{user_list}`
              #
              # @param customer [String]
              # @param user_list [String]
              #
              # @return [String]
              def user_list_path customer:, user_list:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/userLists/#{user_list}"
              end

              ##
              # Create a fully-qualified UserLocationView resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/userLocationViews/{user_location_view}`
              #
              # @param customer [String]
              # @param user_location_view [String]
              #
              # @return [String]
              def user_location_view_path customer:, user_location_view:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/userLocationViews/#{user_location_view}"
              end

              ##
              # Create a fully-qualified Video resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/videos/{video}`
              #
              # @param customer [String]
              # @param video [String]
              #
              # @return [String]
              def video_path customer:, video:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/videos/#{video}"
              end
            end
          end
        end
      end
    end
  end
end
