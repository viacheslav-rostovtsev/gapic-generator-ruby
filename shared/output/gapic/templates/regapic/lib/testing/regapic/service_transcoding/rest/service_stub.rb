# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "regapic/regapic_pb"

module Testing
  module Regapic
    module ServiceTranscoding
      module Rest
        ##
        # REST service stub for the ServiceTranscoding service.
        # service stub contains baseline method implementations
        # including transcoding, making the REST call and deserialing the response
        #
        class ServiceStub
          def initialize endpoint:, credentials:
            # These require statements are intentionally placed here to initialize
            # the REST modules only when it's required.
            require "gapic/rest"

            @client_stub = ::Gapic::Rest::ClientStub.new endpoint: endpoint, credentials: credentials
          end

          ##
          # Baseline implementation for the plain_no_template REST call
          #
          # @param request_pb [::Testing::Regapic::Request]
          #   A request object representing the call parameters. Required.
          # @param options [::Gapic::CallOptions]
          #   Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
          #
          # @yield [result, response] Access the result along with the Faraday response object
          # @yieldparam result [::Testing::Regapic::Response]
          # @yieldparam response [::Faraday::Response]
          #
          # @return [::Testing::Regapic::Response]
          #   A result object deserialized from the server's reply
          def plain_no_template request_pb, options = nil
            raise ::ArgumentError, "request must be provided" if request_pb.nil?

            uri, _body, query_string_params = transcode_plain_no_template_request request_pb
            response = @client_stub.make_get_request(
              uri:     uri,
              params:  query_string_params,
              options: options
            )
            result = ::Testing::Regapic::Response.decode_json response.body, ignore_unknown_fields: true

            yield result, response if block_given?
            result
          end

          ##
          # GRPC transcoding helper method for the plain_no_template REST call
          #
          # @param request_pb [::Testing::Regapic::Request]
          #   A request object representing the call parameters. Required.
          # @return [Array(String, [String, nil], Hash{String => String})]
          #   Uri, Body, Query string parameters
          def transcode_plain_no_template_request request_pb
            uri = "/v2/#{request_pb.table_name}:PlainNoTemplate"
            body = nil
            query_string_params = {}
            query_string_params["appProfileId"] = request_pb.app_profile_id.to_s

            [uri, body, query_string_params]
          end

          ##
          # Baseline implementation for the plain REST call
          #
          # @param request_pb [::Testing::Regapic::Request]
          #   A request object representing the call parameters. Required.
          # @param options [::Gapic::CallOptions]
          #   Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
          #
          # @yield [result, response] Access the result along with the Faraday response object
          # @yieldparam result [::Testing::Regapic::Response]
          # @yieldparam response [::Faraday::Response]
          #
          # @return [::Testing::Regapic::Response]
          #   A result object deserialized from the server's reply
          def plain request_pb, options = nil
            raise ::ArgumentError, "request must be provided" if request_pb.nil?

            uri, _body, query_string_params = transcode_plain_request request_pb
            response = @client_stub.make_get_request(
              uri:     uri,
              params:  query_string_params,
              options: options
            )
            result = ::Testing::Regapic::Response.decode_json response.body, ignore_unknown_fields: true

            yield result, response if block_given?
            result
          end

          ##
          # GRPC transcoding helper method for the plain REST call
          #
          # @param request_pb [::Testing::Regapic::Request]
          #   A request object representing the call parameters. Required.
          # @return [Array(String, [String, nil], Hash{String => String})]
          #   Uri, Body, Query string parameters
          def transcode_plain_request request_pb
            uri = "/v2/#{request_pb.table_name}:Plain"
            body = nil
            query_string_params = {}
            query_string_params["appProfileId"] = request_pb.app_profile_id.to_s

            [uri, body, query_string_params]
          end

          ##
          # Baseline implementation for the with_sub_message REST call
          #
          # @param request_pb [::Testing::Regapic::Request]
          #   A request object representing the call parameters. Required.
          # @param options [::Gapic::CallOptions]
          #   Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
          #
          # @yield [result, response] Access the result along with the Faraday response object
          # @yieldparam result [::Testing::Regapic::Response]
          # @yieldparam response [::Faraday::Response]
          #
          # @return [::Testing::Regapic::Response]
          #   A result object deserialized from the server's reply
          def with_sub_message request_pb, options = nil
            raise ::ArgumentError, "request must be provided" if request_pb.nil?

            uri, _body, query_string_params = transcode_with_sub_message_request request_pb
            response = @client_stub.make_get_request(
              uri:     uri,
              params:  query_string_params,
              options: options
            )
            result = ::Testing::Regapic::Response.decode_json response.body, ignore_unknown_fields: true

            yield result, response if block_given?
            result
          end

          ##
          # GRPC transcoding helper method for the with_sub_message REST call
          #
          # @param request_pb [::Testing::Regapic::Request]
          #   A request object representing the call parameters. Required.
          # @return [Array(String, [String, nil], Hash{String => String})]
          #   Uri, Body, Query string parameters
          def transcode_with_sub_message_request request_pb
            uri = "/v2/#{request_pb.resource.resource_name}:WithSubMessage"
            body = nil
            query_string_params = {}
            query_string_params["tableName"] = request_pb.table_name.to_s
            query_string_params["appProfileId"] = request_pb.app_profile_id.to_s

            [uri, body, query_string_params]
          end

          ##
          # Baseline implementation for the with_multiple_levels REST call
          #
          # @param request_pb [::Testing::Regapic::Request]
          #   A request object representing the call parameters. Required.
          # @param options [::Gapic::CallOptions]
          #   Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
          #
          # @yield [result, response] Access the result along with the Faraday response object
          # @yieldparam result [::Testing::Regapic::Response]
          # @yieldparam response [::Faraday::Response]
          #
          # @return [::Testing::Regapic::Response]
          #   A result object deserialized from the server's reply
          def with_multiple_levels request_pb, options = nil
            raise ::ArgumentError, "request must be provided" if request_pb.nil?

            uri, _body, query_string_params = transcode_with_multiple_levels_request request_pb
            response = @client_stub.make_get_request(
              uri:     uri,
              params:  query_string_params,
              options: options
            )
            result = ::Testing::Regapic::Response.decode_json response.body, ignore_unknown_fields: true

            yield result, response if block_given?
            result
          end

          ##
          # GRPC transcoding helper method for the with_multiple_levels REST call
          #
          # @param request_pb [::Testing::Regapic::Request]
          #   A request object representing the call parameters. Required.
          # @return [Array(String, [String, nil], Hash{String => String})]
          #   Uri, Body, Query string parameters
          def transcode_with_multiple_levels_request request_pb
            uri = "/v2/#{request_pb.resource.inner.inner_name}:WithMultipleLevels"
            body = nil
            query_string_params = {}
            query_string_params["tableName"] = request_pb.table_name.to_s
            query_string_params["appProfileId"] = request_pb.app_profile_id.to_s

            [uri, body, query_string_params]
          end

          ##
          # Baseline implementation for the with_additional_bindings REST call
          #
          # @param request_pb [::Testing::Regapic::Request]
          #   A request object representing the call parameters. Required.
          # @param options [::Gapic::CallOptions]
          #   Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
          #
          # @yield [result, response] Access the result along with the Faraday response object
          # @yieldparam result [::Testing::Regapic::Response]
          # @yieldparam response [::Faraday::Response]
          #
          # @return [::Testing::Regapic::Response]
          #   A result object deserialized from the server's reply
          def with_additional_bindings request_pb, options = nil
            raise ::ArgumentError, "request must be provided" if request_pb.nil?

            uri, _body, query_string_params = transcode_with_additional_bindings_request request_pb
            response = @client_stub.make_get_request(
              uri:     uri,
              params:  query_string_params,
              options: options
            )
            result = ::Testing::Regapic::Response.decode_json response.body, ignore_unknown_fields: true

            yield result, response if block_given?
            result
          end

          ##
          # GRPC transcoding helper method for the with_additional_bindings REST call
          #
          # @param request_pb [::Testing::Regapic::Request]
          #   A request object representing the call parameters. Required.
          # @return [Array(String, [String, nil], Hash{String => String})]
          #   Uri, Body, Query string parameters
          def transcode_with_additional_bindings_request request_pb
            uri = "/v2/#{request_pb.table_name}:WithAdditionalBindings"
            body = nil
            query_string_params = {}
            query_string_params["appProfileId"] = request_pb.app_profile_id.to_s

            [uri, body, query_string_params]
          end
        end
      end
    end
  end
end
