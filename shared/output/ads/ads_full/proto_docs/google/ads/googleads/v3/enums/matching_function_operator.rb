# frozen_string_literal: true

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Ads
    module GoogleAds
      module V3
        module Enums
          # Container for enum describing matching function operator.
          class MatchingFunctionOperatorEnum
            include Google::Protobuf::MessageExts
            extend Google::Protobuf::MessageExts::ClassMethods

            # Possible operators in a matching function.
            module MatchingFunctionOperator
              # Not specified.
              UNSPECIFIED = 0

              # Used for return value only. Represents value unknown in this version.
              UNKNOWN = 1

              # The IN operator.
              IN = 2

              # The IDENTITY operator.
              IDENTITY = 3

              # The EQUALS operator
              EQUALS = 4

              # Operator that takes two or more operands that are of type
              # FunctionOperand and checks that all the operands evaluate to true.
              # For functions related to ad formats, all the operands must be in
              # left_operands.
              AND = 5

              # Operator that returns true if the elements in left_operands contain any
              # of the elements in right_operands. Otherwise, return false. The
              # right_operands must contain at least 1 and no more than 3
              # ConstantOperands.
              CONTAINS_ANY = 6
            end
          end
        end
      end
    end
  end
end
