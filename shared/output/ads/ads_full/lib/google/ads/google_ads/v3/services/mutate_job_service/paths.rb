# frozen_string_literal: true

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Ads
    module GoogleAds
      module V3
        module Services
          module MutateJobService
            # Path helper methods for the MutateJobService API.
            module Paths
              ##
              # Create a fully-qualified Ad resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/ads/{ad}`
              #
              # @param customer [String]
              # @param ad [String]
              #
              # @return [String]
              def ad_path customer:, ad:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/ads/#{ad}"
              end

              ##
              # Create a fully-qualified AdGroup resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroups/{ad_group}`
              #
              # @param customer [String]
              # @param ad_group [String]
              #
              # @return [String]
              def ad_group_path customer:, ad_group:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroups/#{ad_group}"
              end

              ##
              # Create a fully-qualified AdGroupAd resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupAds/{ad_group_ad}`
              #
              # @param customer [String]
              # @param ad_group_ad [String]
              #
              # @return [String]
              def ad_group_ad_path customer:, ad_group_ad:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupAds/#{ad_group_ad}"
              end

              ##
              # Create a fully-qualified AdGroupAdLabel resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupAdLabels/{ad_group_ad_label}`
              #
              # @param customer [String]
              # @param ad_group_ad_label [String]
              #
              # @return [String]
              def ad_group_ad_label_path customer:, ad_group_ad_label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupAdLabels/#{ad_group_ad_label}"
              end

              ##
              # Create a fully-qualified AdGroupBidModifier resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupBidModifiers/{ad_group_bid_modifier}`
              #
              # @param customer [String]
              # @param ad_group_bid_modifier [String]
              #
              # @return [String]
              def ad_group_bid_modifier_path customer:, ad_group_bid_modifier:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupBidModifiers/#{ad_group_bid_modifier}"
              end

              ##
              # Create a fully-qualified AdGroupCriterion resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupCriteria/{ad_group_criterion}`
              #
              # @param customer [String]
              # @param ad_group_criterion [String]
              #
              # @return [String]
              def ad_group_criterion_path customer:, ad_group_criterion:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupCriteria/#{ad_group_criterion}"
              end

              ##
              # Create a fully-qualified AdGroupCriterionLabel resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupCriterionLabels/{ad_group_criterion_label}`
              #
              # @param customer [String]
              # @param ad_group_criterion_label [String]
              #
              # @return [String]
              def ad_group_criterion_label_path customer:, ad_group_criterion_label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupCriterionLabels/#{ad_group_criterion_label}"
              end

              ##
              # Create a fully-qualified AdGroupExtensionSetting resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupExtensionSettings/{ad_group_extension_setting}`
              #
              # @param customer [String]
              # @param ad_group_extension_setting [String]
              #
              # @return [String]
              def ad_group_extension_setting_path customer:, ad_group_extension_setting:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupExtensionSettings/#{ad_group_extension_setting}"
              end

              ##
              # Create a fully-qualified AdGroupFeed resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupFeeds/{ad_group_feed}`
              #
              # @param customer [String]
              # @param ad_group_feed [String]
              #
              # @return [String]
              def ad_group_feed_path customer:, ad_group_feed:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupFeeds/#{ad_group_feed}"
              end

              ##
              # Create a fully-qualified AdGroupLabel resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adGroupLabels/{ad_group_label}`
              #
              # @param customer [String]
              # @param ad_group_label [String]
              #
              # @return [String]
              def ad_group_label_path customer:, ad_group_label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adGroupLabels/#{ad_group_label}"
              end

              ##
              # Create a fully-qualified AdParameter resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/adParameters/{ad_parameter}`
              #
              # @param customer [String]
              # @param ad_parameter [String]
              #
              # @return [String]
              def ad_parameter_path customer:, ad_parameter:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/adParameters/#{ad_parameter}"
              end

              ##
              # Create a fully-qualified Asset resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/assets/{asset}`
              #
              # @param customer [String]
              # @param asset [String]
              #
              # @return [String]
              def asset_path customer:, asset:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/assets/#{asset}"
              end

              ##
              # Create a fully-qualified BiddingStrategy resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/biddingStrategies/{bidding_strategy}`
              #
              # @param customer [String]
              # @param bidding_strategy [String]
              #
              # @return [String]
              def bidding_strategy_path customer:, bidding_strategy:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/biddingStrategies/#{bidding_strategy}"
              end

              ##
              # Create a fully-qualified Campaign resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaigns/{campaign}`
              #
              # @param customer [String]
              # @param campaign [String]
              #
              # @return [String]
              def campaign_path customer:, campaign:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaigns/#{campaign}"
              end

              ##
              # Create a fully-qualified CampaignBidModifier resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignBidModifiers/{campaign_bid_modifier}`
              #
              # @param customer [String]
              # @param campaign_bid_modifier [String]
              #
              # @return [String]
              def campaign_bid_modifier_path customer:, campaign_bid_modifier:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignBidModifiers/#{campaign_bid_modifier}"
              end

              ##
              # Create a fully-qualified CampaignBudget resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignBudgets/{campaign_budget}`
              #
              # @param customer [String]
              # @param campaign_budget [String]
              #
              # @return [String]
              def campaign_budget_path customer:, campaign_budget:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignBudgets/#{campaign_budget}"
              end

              ##
              # Create a fully-qualified CampaignCriterion resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignCriteria/{campaign_criterion}`
              #
              # @param customer [String]
              # @param campaign_criterion [String]
              #
              # @return [String]
              def campaign_criterion_path customer:, campaign_criterion:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignCriteria/#{campaign_criterion}"
              end

              ##
              # Create a fully-qualified CampaignDraft resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignDrafts/{campaign_draft}`
              #
              # @param customer [String]
              # @param campaign_draft [String]
              #
              # @return [String]
              def campaign_draft_path customer:, campaign_draft:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignDrafts/#{campaign_draft}"
              end

              ##
              # Create a fully-qualified CampaignExperiment resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignExperiments/{campaign_experiment}`
              #
              # @param customer [String]
              # @param campaign_experiment [String]
              #
              # @return [String]
              def campaign_experiment_path customer:, campaign_experiment:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignExperiments/#{campaign_experiment}"
              end

              ##
              # Create a fully-qualified CampaignExtensionSetting resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignExtensionSettings/{campaign_extension_setting}`
              #
              # @param customer [String]
              # @param campaign_extension_setting [String]
              #
              # @return [String]
              def campaign_extension_setting_path customer:, campaign_extension_setting:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignExtensionSettings/#{campaign_extension_setting}"
              end

              ##
              # Create a fully-qualified CampaignFeed resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignFeeds/{campaign_feed}`
              #
              # @param customer [String]
              # @param campaign_feed [String]
              #
              # @return [String]
              def campaign_feed_path customer:, campaign_feed:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignFeeds/#{campaign_feed}"
              end

              ##
              # Create a fully-qualified CampaignLabel resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignLabels/{campaign_label}`
              #
              # @param customer [String]
              # @param campaign_label [String]
              #
              # @return [String]
              def campaign_label_path customer:, campaign_label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignLabels/#{campaign_label}"
              end

              ##
              # Create a fully-qualified CampaignSharedSet resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/campaignSharedSets/{campaign_shared_set}`
              #
              # @param customer [String]
              # @param campaign_shared_set [String]
              #
              # @return [String]
              def campaign_shared_set_path customer:, campaign_shared_set:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/campaignSharedSets/#{campaign_shared_set}"
              end

              ##
              # Create a fully-qualified ConversionAction resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/conversionActions/{conversion_action}`
              #
              # @param customer [String]
              # @param conversion_action [String]
              #
              # @return [String]
              def conversion_action_path customer:, conversion_action:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/conversionActions/#{conversion_action}"
              end

              ##
              # Create a fully-qualified Customer resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}`
              #
              # @param customer [String]
              #
              # @return [String]
              def customer_path customer:
                "customers/#{customer}"
              end

              ##
              # Create a fully-qualified CustomerExtensionSetting resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customerExtensionSettings/{customer_extension_setting}`
              #
              # @param customer [String]
              # @param customer_extension_setting [String]
              #
              # @return [String]
              def customer_extension_setting_path customer:, customer_extension_setting:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customerExtensionSettings/#{customer_extension_setting}"
              end

              ##
              # Create a fully-qualified CustomerFeed resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customerFeeds/{customer_feed}`
              #
              # @param customer [String]
              # @param customer_feed [String]
              #
              # @return [String]
              def customer_feed_path customer:, customer_feed:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customerFeeds/#{customer_feed}"
              end

              ##
              # Create a fully-qualified CustomerLabel resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customerLabels/{customer_label}`
              #
              # @param customer [String]
              # @param customer_label [String]
              #
              # @return [String]
              def customer_label_path customer:, customer_label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customerLabels/#{customer_label}"
              end

              ##
              # Create a fully-qualified CustomerNegativeCriterion resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/customerNegativeCriteria/{customer_negative_criterion}`
              #
              # @param customer [String]
              # @param customer_negative_criterion [String]
              #
              # @return [String]
              def customer_negative_criterion_path customer:, customer_negative_criterion:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/customerNegativeCriteria/#{customer_negative_criterion}"
              end

              ##
              # Create a fully-qualified ExtensionFeedItem resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/extensionFeedItems/{extension_feed_item}`
              #
              # @param customer [String]
              # @param extension_feed_item [String]
              #
              # @return [String]
              def extension_feed_item_path customer:, extension_feed_item:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/extensionFeedItems/#{extension_feed_item}"
              end

              ##
              # Create a fully-qualified Feed resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/feeds/{feed}`
              #
              # @param customer [String]
              # @param feed [String]
              #
              # @return [String]
              def feed_path customer:, feed:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/feeds/#{feed}"
              end

              ##
              # Create a fully-qualified FeedItem resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/feedItems/{feed_item}`
              #
              # @param customer [String]
              # @param feed_item [String]
              #
              # @return [String]
              def feed_item_path customer:, feed_item:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/feedItems/#{feed_item}"
              end

              ##
              # Create a fully-qualified FeedItemTarget resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/feedItemTargets/{feed_item_target}`
              #
              # @param customer [String]
              # @param feed_item_target [String]
              #
              # @return [String]
              def feed_item_target_path customer:, feed_item_target:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/feedItemTargets/#{feed_item_target}"
              end

              ##
              # Create a fully-qualified FeedMapping resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/feedMappings/{feed_mapping}`
              #
              # @param customer [String]
              # @param feed_mapping [String]
              #
              # @return [String]
              def feed_mapping_path customer:, feed_mapping:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/feedMappings/#{feed_mapping}"
              end

              ##
              # Create a fully-qualified GeoTargetConstant resource string.
              #
              # The resource will be in the following format:
              #
              # `geoTargetConstants/{geo_target_constant}`
              #
              # @param geo_target_constant [String]
              #
              # @return [String]
              def geo_target_constant_path geo_target_constant:
                "geoTargetConstants/#{geo_target_constant}"
              end

              ##
              # Create a fully-qualified Label resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/labels/{label}`
              #
              # @param customer [String]
              # @param label [String]
              #
              # @return [String]
              def label_path customer:, label:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/labels/#{label}"
              end

              ##
              # Create a fully-qualified MediaFile resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/mediaFiles/{media_file}`
              #
              # @param customer [String]
              # @param media_file [String]
              #
              # @return [String]
              def media_file_path customer:, media_file:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/mediaFiles/#{media_file}"
              end

              ##
              # Create a fully-qualified MutateJob resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/mutateJobs/{mutate_job}`
              #
              # @param customer [String]
              # @param mutate_job [String]
              #
              # @return [String]
              def mutate_job_path customer:, mutate_job:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/mutateJobs/#{mutate_job}"
              end

              ##
              # Create a fully-qualified RemarketingAction resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/remarketingActions/{remarketing_action}`
              #
              # @param customer [String]
              # @param remarketing_action [String]
              #
              # @return [String]
              def remarketing_action_path customer:, remarketing_action:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/remarketingActions/#{remarketing_action}"
              end

              ##
              # Create a fully-qualified SharedCriterion resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/sharedCriteria/{shared_criterion}`
              #
              # @param customer [String]
              # @param shared_criterion [String]
              #
              # @return [String]
              def shared_criterion_path customer:, shared_criterion:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/sharedCriteria/#{shared_criterion}"
              end

              ##
              # Create a fully-qualified SharedSet resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/sharedSets/{shared_set}`
              #
              # @param customer [String]
              # @param shared_set [String]
              #
              # @return [String]
              def shared_set_path customer:, shared_set:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/sharedSets/#{shared_set}"
              end

              ##
              # Create a fully-qualified UserList resource string.
              #
              # The resource will be in the following format:
              #
              # `customers/{customer}/userLists/{user_list}`
              #
              # @param customer [String]
              # @param user_list [String]
              #
              # @return [String]
              def user_list_path customer:, user_list:
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/userLists/#{user_list}"
              end

              extend self
            end
          end
        end
      end
    end
  end
end
