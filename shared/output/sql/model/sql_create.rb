# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "sqlite3"

module Model
  module Generation
    module Create
      class << self
        # GemModels
        def create_table_gem_model db
          db.execute("drop table if exists GemModels")
          db.execute <<-SQL
            create table GemModels (
              id INTEGER not null,
              design_name TEXT not null,
              name TEXT,

              PRIMARY KEY(id)


            );
          SQL
        end

        # PackageModels
        def create_table_package_model db
          db.execute("drop table if exists PackageModels")
          db.execute <<-SQL
            create table PackageModels (
              id INTEGER not null,
              design_name TEXT not null,
              gem_model_id INTEGER not null,
              name TEXT,
              ruby_namespace TEXT,

              PRIMARY KEY(id)

              FOREIGN KEY(gem_model_id) REFERENCES GemModels(id)

            );
          SQL
        end

        # ServiceModels
        def create_table_service_model db
          db.execute("drop table if exists ServiceModels")
          db.execute <<-SQL
            create table ServiceModels (
              id INTEGER not null,
              design_name TEXT not null,
              package_model_id INTEGER not null,
              name TEXT,

              PRIMARY KEY(id)

              FOREIGN KEY(package_model_id) REFERENCES PackageModels(id)

            );
          SQL
        end

        # RpcModels
        def create_table_rpc_model db
          db.execute("drop table if exists RpcModels")
          db.execute <<-SQL
            create table RpcModels (
              id INTEGER not null,
              design_name TEXT not null,
              service_model_id INTEGER not null,
              rpc_name TEXT,
              input_name TEXT,
              output_name TEXT,
              generate_implicit_headers BOOLEAN,
              generate_explicit_headers BOOLEAN,
              arity TEXT,

              PRIMARY KEY(id)

              FOREIGN KEY(service_model_id) REFERENCES ServiceModels(id)

            );
          SQL
        end
      end
    end
  end
end
