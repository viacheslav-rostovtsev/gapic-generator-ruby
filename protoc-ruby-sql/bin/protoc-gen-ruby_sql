#!/usr/bin/env -S ruby -EUTF-8
# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

$LOAD_PATH.unshift ::File.expand_path("../lib", __dir__)
gem "gapic-generator"
require "gapic/schema/api"
require "google/protobuf/compiler/plugin.pb"
require "protoc/ruby/generators/sql_generator"

def run request
  # Create an API Schema from the FileDescriptorProtos
  api = Gapic::Schema::Api.new request

  # Create and run the generator from the API.
  output_files = ::Protoc::Ruby::Generators::SqlGenerator.new(api).generate

  # Create and write the response
  response = Google::Protobuf::Compiler::CodeGeneratorResponse.new file: output_files
  feature_set = Google::Protobuf::Compiler::CodeGeneratorResponse::Feature::FEATURE_PROTO3_OPTIONAL.to_i
  response.supported_features = feature_set
  response
end

# Ensure that no encoding conversions are done on STDIN and STDOUT
# since we are passing binary data back and forth. Otherwise these
# streams will be mangled on Windows.
$stdin.binmode
$stdout.binmode

request = Google::Protobuf::Compiler::CodeGeneratorRequest.decode $stdin.read

# Run the request, specifying the ads generator
response = run request

$stdout.print response.serialize
