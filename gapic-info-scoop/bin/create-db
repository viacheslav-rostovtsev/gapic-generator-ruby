#!/usr/bin/env ruby
require "sqlite3"
require "pp"

db = SQLite3::Database.new "db/gapic-info.db"

db.execute("drop table if exists DescriptorSets")
pp db.execute <<-SQL
  create table DescriptorSets (
    id bigint not null, 
    design_name varchar(1023),

    PRIMARY KEY(id)
  );
SQL

db.execute("drop table if exists FileDescriptors;")
pp db.execute <<-SQL
  create table FileDescriptors (
    id bigint not null, 
    design_name varchar(1023),
    descriptor_set_id bigint not null,
    name varchar(255),
    package varchar(255),
    java_package varchar(255),
    java_outer_classname varchar(255),
    java_multiple_files INTEGER,
    java_string_check_utf8 INTEGER,
    optimize_for INTEGER,
    go_package varchar(255),
    cc_generic_services INTEGER,
    java_generic_services INTEGER,
    py_generic_services INTEGER,
    php_generic_services INTEGER,
    deprecated INTEGER,
    cc_enable_arenas INTEGER,
    objc_class_prefix varchar(255),
    csharp_namespace varchar(255),
    swift_prefix varchar(255),
    php_class_prefix varchar(255),
    php_namespace varchar(255),
    php_metadata_namespace varchar(255),
    ruby_package varchar(255),

    PRIMARY KEY(id)
    FOREIGN KEY(descriptor_set_id) REFERENCES Libraries(id)
  );
SQL

db.execute("drop table if exists GemModels")
pp db.execute <<-SQL
  create table GemModels (
    id bigint not null,
    design_name varchar(1023),
    "name" varchar(255),

    PRIMARY KEY(id)
  );
SQL

db.execute("drop table if exists PackageModels")
pp db.execute <<-SQL
  create table PackageModels (
    id bigint not null,
    design_name varchar(1023),
    gem_model_id bigint not null,

    "name" varchar(255),
    ruby_namespace varchar(255)

    PRIMARY KEY(id)
    FOREIGN KEY(gem_model_id) REFERENCES GemModels(id)
  );
SQL

db.execute("drop table if exists ServiceModels")
pp db.execute <<-SQL
  create table ServiceModels (
    id bigint not null, 
    design_name varchar(1023),
    package_model_id bigint not null,

    name varchar(255),
    
    PRIMARY KEY(id)
    FOREIGN KEY(package_model_id) REFERENCES PackageModels(id)
  );
SQL

db.execute("drop table if exists RpcModels")
pp db.execute <<-SQL
  create table RpcModels (
    id bigint not null, 
    design_name varchar(1023),
    service_model_id bigint not null,

    rpc_name varchar(255),
    input_name varchar(255),
    output_name varchar(255),
    generate_implicit_headers INTEGER,
    generate_explicit_headers INTEGER,
    arity varchar(255),

    
    PRIMARY KEY(id)
    FOREIGN KEY(service_model_id) REFERENCES ServiceModels(id)
  );
SQL
