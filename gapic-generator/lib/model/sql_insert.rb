# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "sqlite3"

module Model
  module Generation
    module Insert
      class << self
        # GemModels
        def insert_into_gem_model db, gem_model
          db.execute("insert into GemModels (id, design_name, name) values (?, ?, ?)",
                     gem_model.id,
                     gem_model.design_name,
                     gem_model.name)
        end

        # PackageModels
        def insert_into_package_model db, package_model
          db.execute("insert into PackageModels (id, design_name, gem_model_id, name, ruby_namespace) values (?, ?, ?, ?, ?)",
                     package_model.id,
                     package_model.design_name,
                     package_model.gem_model_id,
                     package_model.name,
                     package_model.ruby_namespace)
        end

        # ServiceModels
        def insert_into_service_model db, service_model
          db.execute("insert into ServiceModels (id, design_name, package_model_id, name) values (?, ?, ?, ?)",
                     service_model.id,
                     service_model.design_name,
                     service_model.package_model_id,
                     service_model.name)
        end

        # RpcModels
        def insert_into_rpc_model db, rpc_model
          db.execute("insert into RpcModels (id, design_name, service_model_id, name, generate_implicit_headers, generate_explicit_headers, arity) values (?, ?, ?, ?, ?, ?, ?)",
                     rpc_model.id,
                     rpc_model.design_name,
                     rpc_model.service_model_id,
                     rpc_model.name,
                     rpc_model.generate_implicit_headers ? 1 : 0,
                     rpc_model.generate_explicit_headers ? 1 : 0,
                     rpc_model.arity)
        end

        # MessageModels
        def insert_into_message_model db, message_model
          db.execute("insert into MessageModels (id, design_name, rpc_model_id, name) values (?, ?, ?, ?)",
                     message_model.id,
                     message_model.design_name,
                     message_model.rpc_model_id,
                     message_model.name)
        end

        # FieldModels
        def insert_into_field_model db, field_model
          db.execute("insert into FieldModels (id, design_name, message_model_id, name, number, type_name) values (?, ?, ?, ?, ?, ?)",
                     field_model.id,
                     field_model.design_name,
                     field_model.message_model_id,
                     field_model.name,
                     field_model.number,
                     field_model.type_name)
        end
      end
    end
  end
end
