syntax = "proto3";
package model.package;

message FileDescriptorSet {
    uint64 id = 6952;
    string design_name = 6953;

    repeated FileDescriptorProto file_descriptor_protos = 1;
}

message FileDescriptorProto {
    uint64 id = 6952;
    string design_name = 6953;
    uint64 descriptor_set_id = 6954;

    string name = 1;
    string package = 2;
    string syntax = 12;

    // Sets the Java package where classes generated from this .proto will be
    // placed.  By default, the proto package is used, but this is often
    // inappropriate because proto packages do not normally start with backwards
    // domain names.
    string java_package = 101;


    // Controls the name of the wrapper Java class generated for the .proto file.
    // That class will always contain the .proto file's getDescriptor() method as
    // well as any top-level extensions defined in the .proto file.
    // If java_multiple_files is disabled, then all the other classes from the
    // .proto file will be nested inside the single wrapper outer class.
    string java_outer_classname = 108;

    // If enabled, then the Java code generator will generate a separate .java
    // file for each top-level message, enum, and service defined in the .proto
    // file.  Thus, these types will *not* be nested inside the wrapper class
    // named by java_outer_classname.  However, the wrapper class will still be
    // generated to contain the file's getDescriptor() method as well as any
    // top-level extensions defined in the file.
    bool java_multiple_files = 110;


    // If set true, then the Java2 code generator will generate code that
    // throws an exception whenever an attempt is made to assign a non-UTF-8
    // byte sequence to a string field.
    // Message reflection will do the same.
    // However, an extension field still accepts non-UTF-8 byte sequences.
    // This option has no effect on when used with the lite runtime.
    bool java_string_check_utf8 = 127;


    // Generated classes can be optimized for speed or code size.
        enum OptimizeMode {
            UNKNOWN = 0;
            SPEED = 1;         // Generate complete code for parsing, serialization,
                            // etc.
            CODE_SIZE = 2;     // Use ReflectionOps to implement these methods.
            LITE_RUNTIME = 3;  // Generate code using MessageLite and the lite runtime.
        }
    OptimizeMode optimize_for = 109;

    // Sets the Go package where structs generated from this .proto will be
    // placed. If omitted, the Go package will be derived from the following:
    //   - The basename of the package import path, if provided.
    //   - Otherwise, the package statement in the .proto file, if present.
    //   - Otherwise, the basename of the .proto file, without extension.
    string go_package = 111;


    // Should generic services be generated in each language?  "Generic" services
    // are not specific to any particular RPC system.  They are generated by the
    // main code generators in each language (without additional plugins).
    // Generic services were the only kind of service generation supported by
    // early versions of google.protobuf.
    //
    // Generic services are now considered deprecated in favor of using plugins
    // that generate code specific to your particular RPC system.  Therefore,
    // these default to false.  Old code which depends on generic services should
    // explicitly set them to true.
    bool cc_generic_services = 116;
    bool java_generic_services = 117;
    bool py_generic_services = 118;
    bool php_generic_services = 142;

    // Is this file deprecated?
    // Depending on the target platform, this can emit Deprecated annotations
    // for everything in the file, or it will be completely ignored; in the very
    // least, this is a formalization for deprecating files.
    bool deprecated = 123;

    // Enables the use of arenas for the proto messages in this file. This applies
    // only to generated classes for C++.
    bool cc_enable_arenas = 131;


    // Sets the objective c class prefix which is prepended to all objective c
    // generated classes from this .proto. There is no default.
    string objc_class_prefix = 136;

    // Namespace for generated classes; defaults to the package.
    string csharp_namespace = 137;

    // By default Swift generators will take the proto package and CamelCase it
    // replacing '.' with underscore and use that to prefix the types/symbols
    // defined. When this options is provided, they will use this value instead
    // to prefix the types/symbols defined.
    string swift_prefix = 139;

    // Sets the php class prefix which is prepended to all php generated classes
    // from this .proto. Default is empty.
    string php_class_prefix = 140;

    // Use this option to change the namespace of php generated classes. Default
    // is empty. When this option is empty, the package name will be used for
    // determining the namespace.
    string php_namespace = 141;

    // Use this option to change the namespace of php generated metadata classes.
    // Default is empty. When this option is empty, the proto file name will be
    // used for determining the namespace.
    string php_metadata_namespace = 144;

    // Use this option to change the package of ruby generated classes. Default
    // is empty. When this option is not set, the package name will be used for
    // determining the ruby package.
    string ruby_package = 145;
}
